#
# Given a spreadsheet as generated by p3x-run-qa-suite.pl updated any rows
# that are missing status data.
#

use strict;
use Getopt::Long::Descriptive;
use Bio::KBase::AppService::Client;
use File::Slurp;
use JSON::XS;
use Data::Dumper;

my $cli = Bio::KBase::AppService::Client->new;

my($opt, $usage) = describe_options("%c %o input-file",
				    ["output-file|o=s" => "Write output here"],
				    ["help|h" => "Show this help message"]);
$usage->die() if @ARGV != 1;
print($usage->text), exit 0 if $opt->help;

my $input_file = shift;

open(IN, "<", $input_file) or die "Cannot read $input_file: $!";

my $out_fh = \*STDOUT;
if ($opt->output_file)
{
    undef $out_fh;
    open($out_fh, ">", $opt->output_file) or die "Cannot write output " . $opt->output_file . ": $!";
}

while (<IN>)
{
    chomp;
    my($tag, $container, $app, $task_id, $inp_fn, $out_fs, $out_ws_file, $out_ws_folder, $task_exit, $qa_success, $elap) = split(/\t/);

    next unless -f $inp_fn;
    if (!defined($task_exit))
    {
	my $det = $cli->query_task_details($task_id);
	if (defined($det->{exitcode}))
	{
	    my $task = $cli->query_tasks([$task_id]);
	    $elap = $task->{$task_id}->{elapsed_time};
	    $task_exit = $det->{exitcode};

	    my $params = decode_json(scalar read_file($inp_fn));

	    $qa_success = (($task_exit == 0) xor $params->{failure_expected}) ? "OK" : "FAIL";
	}
    }
    print $out_fh join("\t", $tag, $container, $app, $task_id, $inp_fn, $out_fs, $out_ws_file, $out_ws_folder, $task_exit, $qa_success, $elap), "\n";
}

